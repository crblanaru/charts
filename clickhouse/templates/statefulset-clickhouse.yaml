apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "clickhouse.fullname" . }}
  labels:
    app.kubernetes.io/name: {{ include "clickhouse.name" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  replicas: {{ .Values.clickhouse.replicas }}
  podManagementPolicy: {{ .Values.clickhouse.podManagementPolicy }}
  updateStrategy:
    type: {{ .Values.clickhouse.updateStrategy }}
    {{- if (eq "Recreate" .Values.clickhouse.updateStrategy) }}
    rollingUpdate: null
    {{- else if .Values.clickhouse.rollingUpdatePartition }}
    rollingUpdate:
      partition: {{ .Values.clickhouse.rollingUpdatePartition }}
    {{- end }}
  serviceName: {{ include "clickhouse.fullname" . }}-headless
  selector: 
    matchLabels: 
      app.kubernetes.io/name: {{ include "clickhouse.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata: 
      labels: 
        app.kubernetes.io/name: {{ include "clickhouse.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
    {{- if .Values.affinity }}
      affinity:
{{ toYaml .Values.affinity | indent 8 }}
    {{- end }}
    {{- if .Values.clickhouse.imagePullSecrets }}
      imagePullSecrets:
    {{- range .Values.clickhouse.imagePullSecrets }}
      - name: {{ . | quote }}
    {{- end }}
    {{- end }}
      initContainers:
      - name: init
        image: busybox:1.31.0
        imagePullPolicy: IfNotPresent
        args:
        - /bin/sh
        - -c
        - |
          mkdir -p /etc/clickhouse-server/metrica.d
      - name: restoreFromS3
        image: yandex/clickhouse-server:19.14
        imagePullPolicy: IfNotPresent
        env:
        - name: CLICKHOUSE_HOST
          value: clickhouse-rwj4sm
        - name: CLICKHOUSE_PORT
          value: '9000'
        - name: BACKUP_USER
          value: default
        - name: BACKUP_PASSWORD
        - name: REMOTE_STORAGE
          value: s3
        - name: BACKUPS_TO_KEEP_REMOTE
          value: '1'
        - name: S3_ACCESS_KEY
          value: {{ .Values.S3_ACCESS_KEY }}
        - name: S3_SECRET_KEY
          value: {{ .Values.S3_SECRET_KEY }}
        - name: S3_BUCKET
          value: bnsclickhousebucket
        - name: S3_ENDPOINT
          value: http://bnsclickhousebucket.s3.eu-west-1.amazonaws.com/
        - name: S3_REGION
          value: eu-west-1
        - name: S3_ACL
          value: private
        - name: S3_FORCE_PATH_STYLE
          value: 'true'
        - name: S3_PATH
          value: backup
        - name: S3_DISABLE_SSL
          value: 'true'
        - name: S3_DEBUG
          value: 'false'
        args:
        - /bin/sh
        - -c
        - |
          BACKUP_NAME="mybackup3"; /usr/bin/wget https://github.com/AlexAkulov/clickhouse-backup/releases/download/v0.6.3/clickhouse-backup.tar.gz --no-check-certificate; /bin/tar -xf clickhouse-backup.tar.gz; cd clickhouse-backup/ ; mkdir -p /var/lib/clickhouse/shadow; ./clickhouse-backup download $BACKUP_NAME; ./clickhouse-backup restore $BACKUP_NAME; 
      containers:
      - name: {{ include "clickhouse.fullname" . }}
        image: {{ .Values.clickhouse.image }}:{{ .Values.clickhouse.imageVersion }}
        imagePullPolicy: {{ .Values.clickhouse.imagePullPolicy }}
        ports:
        - name: http-port
          containerPort: {{ .Values.clickhouse.http_port | default "8123" }} 
        - name: tcp-port
          containerPort: {{ .Values.clickhouse.tcp_port | default "9000" }}
        - name: inter-http-port
          containerPort: {{ .Values.clickhouse.interserver_http_port | default "9009" }}
      {{- if .Values.clickhouse.livenessProbe.enabled }}
        livenessProbe: 
          tcpSocket:
            port: {{ .Values.clickhouse.tcp_port }}
          initialDelaySeconds: {{ .Values.clickhouse.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.clickhouse.livenessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.clickhouse.livenessProbe.timeoutSeconds }}
          failureThreshold: {{ .Values.clickhouse.livenessProbe.failureThreshold }}
          successThreshold: {{ .Values.clickhouse.livenessProbe.successThreshold }}
      {{- end }}
      {{- if .Values.clickhouse.readinessProbe.enabled }}
        readinessProbe:
          tcpSocket:
            port: {{ .Values.clickhouse.tcp_port }}
          initialDelaySeconds: {{ .Values.clickhouse.readinessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.clickhouse.readinessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.clickhouse.readinessProbe.timeoutSeconds }}
          failureThreshold: {{ .Values.clickhouse.readinessProbe.failureThreshold }}
          successThreshold: {{ .Values.clickhouse.readinessProbe.successThreshold }}
      {{- end }}
        volumeMounts:
        - name: {{ include "clickhouse.fullname" . }}-data
          mountPath: {{ include "clickhouse.fullpath" . }}
        - name: {{ include "clickhouse.fullname" . }}-logs
          mountPath: {{ include "clickhouse.logpath" . }}
        - name: {{ include "clickhouse.fullname" . }}-config
          mountPath: /etc/clickhouse-server/config.d
        - name: {{ include "clickhouse.fullname" . }}-metrica
          mountPath: /etc/clickhouse-server/metrica.d
        - name: {{ include "clickhouse.fullname" . }}-users
          mountPath: /etc/clickhouse-server/users.d
        securityContext:
          privileged: true
          runAsUser: 0
    {{- if .Values.clickhouse.imagePullSecrets }}
      imagePullSecrets: 
      - name: {{ .Values.clickhouse.imagePullSecrets }}
    {{- end }}
    {{- if .Values.clickhouse.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.clickhouse.nodeSelector | indent 8 }}
    {{- end }}
      volumes: 
      - name: {{ include "clickhouse.fullname" . }}-data
      {{- if .Values.clickhouse.persistentVolumeClaim.dataPersistentVolume.enabled }}
        persistentVolumeClaim:
          claimName: {{ include "clickhouse.fullname" . }}-data
      {{- else }}
        emptyDir: {}
      {{- end }}
      - name: {{ include "clickhouse.fullname" . }}-logs
      {{- if .Values.clickhouse.persistentVolumeClaim.logsPersistentVolume.enabled }}
        persistentVolumeClaim:
          claimName: {{ include "clickhouse.fullname" . }}-logs
      {{- else }}
        emptyDir: {}
      {{- end }}
      {{- if .Values.clickhouse.configmap.enabled }}
      - name: {{ include "clickhouse.fullname" . }}-config
        configMap:
          name: {{ include "clickhouse.fullname" . }}-config
          items:
          - key: config.xml
            path: config.xml
      - name: {{ include "clickhouse.fullname" . }}-metrica
        configMap:
          name: {{ include "clickhouse.fullname" . }}-metrica
          items:
          - key: metrica.xml
            path: metrica.xml
      - name: {{ include "clickhouse.fullname" . }}-users
        configMap:
          name: {{ include "clickhouse.fullname" . }}-users
          items:
          - key: users.xml
            path: users.xml
      {{- end }}
{{- if .Values.clickhouse.persistentVolumeClaim.enabled }}
  volumeClaimTemplates:
{{- if .Values.clickhouse.persistentVolumeClaim.dataPersistentVolume.enabled }}
  - metadata:
      name: {{ include "clickhouse.fullname" . }}-data
      labels:
        app.kubernetes.io/name: {{ include "clickhouse.name" . }}-data
        app.kubernetes.io/instance: {{ .Release.Name }}-data
        app.kubernetes.io/managed-by: {{ .Release.Service }}
    spec:
      accessModes: 
    {{- range .Values.clickhouse.persistentVolumeClaim.dataPersistentVolume.accessModes }}
      - {{ . | quote }}
    {{- end }}
    {{- if (eq "-" .Values.clickhouse.persistentVolumeClaim.dataPersistentVolume.storageClassName) }}
      storageClassName: ""
    {{- else }}
      storageClassName: {{ .Values.clickhouse.persistentVolumeClaim.dataPersistentVolume.storageClassName | quote }}
    {{- end }}
      resources:
        requests:
          storage: {{ .Values.clickhouse.persistentVolumeClaim.dataPersistentVolume.storage | quote }}
{{- end }}
{{- if .Values.clickhouse.persistentVolumeClaim.logsPersistentVolume.enabled }}
  - metadata:
      name: {{ include "clickhouse.fullname" . }}-logs
      labels:
        app.kubernetes.io/name: {{ include "clickhouse.name" . }}-logs
        app.kubernetes.io/instance: {{ .Release.Name }}-logs
        app.kubernetes.io/managed-by: {{ .Release.Service }}
    spec:
      accessModes: 
    {{- range .Values.clickhouse.persistentVolumeClaim.logsPersistentVolume.accessModes }}
      - {{ . | quote }}
    {{- end }}
    {{- if (eq "-" .Values.clickhouse.persistentVolumeClaim.logsPersistentVolume.storageClassName) }}
      storageClassName: ""
    {{- else }}
      storageClassName: {{ .Values.clickhouse.persistentVolumeClaim.logsPersistentVolume.storageClassName | quote }}
    {{- end }}
      resources:
        requests:
          storage: {{ .Values.clickhouse.persistentVolumeClaim.logsPersistentVolume.storage | quote }}
{{- end }}
{{- end }}
